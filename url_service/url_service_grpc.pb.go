// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: url_service/url_service.proto

package url_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlServiceClient is the client API for UrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlServiceClient interface {
	PostUrl(ctx context.Context, in *UrlPostRequest, opts ...grpc.CallOption) (*UrlPostResponse, error)
	GetChecks(ctx context.Context, in *CheckGetRequest, opts ...grpc.CallOption) (*CheckGetResponse, error)
	GetUrls(ctx context.Context, in *UrlGetRequest, opts ...grpc.CallOption) (*UrlGetResponse, error)
	DeleteUrl(ctx context.Context, in *CheckGetRequest, opts ...grpc.CallOption) (*CheckGetRequest, error)
}

type urlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlServiceClient(cc grpc.ClientConnInterface) UrlServiceClient {
	return &urlServiceClient{cc}
}

func (c *urlServiceClient) PostUrl(ctx context.Context, in *UrlPostRequest, opts ...grpc.CallOption) (*UrlPostResponse, error) {
	out := new(UrlPostResponse)
	err := c.cc.Invoke(ctx, "/url_service.UrlService/PostUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) GetChecks(ctx context.Context, in *CheckGetRequest, opts ...grpc.CallOption) (*CheckGetResponse, error) {
	out := new(CheckGetResponse)
	err := c.cc.Invoke(ctx, "/url_service.UrlService/GetChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) GetUrls(ctx context.Context, in *UrlGetRequest, opts ...grpc.CallOption) (*UrlGetResponse, error) {
	out := new(UrlGetResponse)
	err := c.cc.Invoke(ctx, "/url_service.UrlService/GetUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) DeleteUrl(ctx context.Context, in *CheckGetRequest, opts ...grpc.CallOption) (*CheckGetRequest, error) {
	out := new(CheckGetRequest)
	err := c.cc.Invoke(ctx, "/url_service.UrlService/DeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlServiceServer is the server API for UrlService service.
// All implementations must embed UnimplementedUrlServiceServer
// for forward compatibility
type UrlServiceServer interface {
	PostUrl(context.Context, *UrlPostRequest) (*UrlPostResponse, error)
	GetChecks(context.Context, *CheckGetRequest) (*CheckGetResponse, error)
	GetUrls(context.Context, *UrlGetRequest) (*UrlGetResponse, error)
	DeleteUrl(context.Context, *CheckGetRequest) (*CheckGetRequest, error)
	mustEmbedUnimplementedUrlServiceServer()
}

// UnimplementedUrlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlServiceServer struct {
}

func (UnimplementedUrlServiceServer) PostUrl(context.Context, *UrlPostRequest) (*UrlPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUrl not implemented")
}
func (UnimplementedUrlServiceServer) GetChecks(context.Context, *CheckGetRequest) (*CheckGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChecks not implemented")
}
func (UnimplementedUrlServiceServer) GetUrls(context.Context, *UrlGetRequest) (*UrlGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrls not implemented")
}
func (UnimplementedUrlServiceServer) DeleteUrl(context.Context, *CheckGetRequest) (*CheckGetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrl not implemented")
}
func (UnimplementedUrlServiceServer) mustEmbedUnimplementedUrlServiceServer() {}

// UnsafeUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlServiceServer will
// result in compilation errors.
type UnsafeUrlServiceServer interface {
	mustEmbedUnimplementedUrlServiceServer()
}

func RegisterUrlServiceServer(s grpc.ServiceRegistrar, srv UrlServiceServer) {
	s.RegisterService(&UrlService_ServiceDesc, srv)
}

func _UrlService_PostUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).PostUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.UrlService/PostUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).PostUrl(ctx, req.(*UrlPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_GetChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).GetChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.UrlService/GetChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).GetChecks(ctx, req.(*CheckGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_GetUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).GetUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.UrlService/GetUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).GetUrls(ctx, req.(*UrlGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_DeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).DeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_service.UrlService/DeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).DeleteUrl(ctx, req.(*CheckGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlService_ServiceDesc is the grpc.ServiceDesc for UrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_service.UrlService",
	HandlerType: (*UrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostUrl",
			Handler:    _UrlService_PostUrl_Handler,
		},
		{
			MethodName: "GetChecks",
			Handler:    _UrlService_GetChecks_Handler,
		},
		{
			MethodName: "GetUrls",
			Handler:    _UrlService_GetUrls_Handler,
		},
		{
			MethodName: "DeleteUrl",
			Handler:    _UrlService_DeleteUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_service/url_service.proto",
}
